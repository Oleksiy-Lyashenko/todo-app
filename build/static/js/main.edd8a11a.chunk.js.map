{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","App.jsx","index.jsx"],"names":["TodoItem","todo","deleteTodo","changeComplete","changeEditing","changeItem","useState","click","setClick","className","classNames","completed","editing","onDoubleClick","id","type","checked","onChange","title","onClick","value","event","target","onKeyDown","key","prevText","TodoList","items","allComplete","clearCompleted","newArr","setNewArr","all","active","filterAll","setFilterAll","todosFilter","condition","filter","useEffect","htmlFor","map","x","length","href","selected","find","App","newTodo","setNewTodo","JSON","parse","localStorage","getItem","listTodo","setListTodo","setItem","stringify","onSubmit","preventDefault","task","Date","placeholder","required","todoId","handle","abc","next","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edd8a11a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodoItem = ({\n  todo,\n  deleteTodo,\n  changeComplete,\n  changeEditing,\n  changeItem,\n}) => {\n  const [click, setClick] = useState(false);\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        { completed: todo.completed },\n        { editing: click },\n      )}\n      onDoubleClick={() => {\n        changeEditing(todo.id);\n        setClick(true);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => changeComplete(todo.id)}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={todo.title}\n        onChange={event => changeItem(event.target.value, todo.id)}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            setClick(false);\n          }\n\n          if (event.key === 'Escape') {\n            changeItem(todo.prevText, todo.id);\n            setClick(false);\n          }\n        }}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.objectOf().isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n  changeEditing: PropTypes.func.isRequired,\n  changeItem: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  items,\n  deleteTodo,\n  changeComplete,\n  allComplete,\n  clearCompleted,\n  changeEditing,\n  changeItem,\n}) => {\n  const [newArr, setNewArr] = useState(items);\n  const [filterAll, setFilterAll] = useState({\n    all: true,\n    active: false,\n    completed: false,\n  });\n\n  const todosFilter = (condition) => {\n    switch (condition) {\n      case 'all':\n        return setNewArr(items);\n      case 'active':\n        return setNewArr([...items].filter(\n          todo => todo.completed !== true,\n        ));\n      case 'completed':\n        return setNewArr([...items].filter(\n          todo => todo.completed === true,\n        ));\n      default:\n        return 0;\n    }\n  };\n\n  useEffect(() => {\n    setNewArr(items);\n  }, [items]);\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={() => allComplete()}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {newArr.map(todo => (\n            <TodoItem\n              todo={todo}\n              deleteTodo={deleteTodo}\n              changeComplete={changeComplete}\n              changeEditing={changeEditing}\n              changeItem={changeItem}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {[...items].filter(x => x.completed === false).length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({ selected: filterAll.all })}\n              onClick={() => {\n                todosFilter('all');\n                setFilterAll({\n                  all: true,\n                  active: false,\n                  completed: false,\n                });\n              }}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: filterAll.active })}\n              onClick={() => {\n                todosFilter('active');\n                setFilterAll({\n                  all: false,\n                  active: true,\n                  completed: false,\n                });\n              }}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: filterAll.completed })}\n              onClick={() => {\n                todosFilter('completed');\n                setFilterAll({\n                  all: false,\n                  active: false,\n                  completed: true,\n                });\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        {[...items].find(x => x.completed) && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => clearCompleted()}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf().isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeComplete: PropTypes.func.isRequired,\n  allComplete: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  changeEditing: PropTypes.func.isRequired,\n  changeItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { useEffect, useState } from 'react';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [newTodo, setNewTodo] = useState();\n  const [listTodo, setListTodo] = useState(\n    JSON.parse(localStorage.getItem('items')) || [],\n  );\n\n  useEffect(() => {\n    localStorage.setItem('items', JSON.stringify(listTodo));\n  }, [listTodo]);\n\n  const handleEvent = (event) => {\n    event.preventDefault();\n\n    const task = {\n      id: (+new Date()),\n      title: newTodo,\n      completed: false,\n      editing: false,\n      prevText: '',\n    };\n\n    setListTodo([...listTodo, task]);\n    setNewTodo('');\n  };\n\n  const deleteTodo = (todoId) => {\n    const newArr = listTodo.filter(\n      todo => todo.id !== todoId,\n    );\n\n    setListTodo(newArr);\n  };\n\n  const changeComplete = (todoId) => {\n    setListTodo(\n      listTodo.map((todo) => {\n        if (todo.id === todoId) {\n          const handle = todo.completed;\n\n          return {\n            ...todo,\n            completed: !handle,\n          };\n        }\n\n        return todo;\n      }),\n    );\n  };\n\n  const changeItem = (abc, todoId) => {\n    setListTodo(\n      listTodo.map((todo) => {\n        if (todo.id === todoId) {\n          const next = abc;\n\n          return {\n            ...todo,\n            title: next,\n          };\n        }\n\n        return todo;\n      }),\n    );\n  };\n\n  const changeEditing = (todoId) => {\n    setListTodo(\n      listTodo.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            prevText: todo.title,\n          };\n        }\n\n        return todo;\n      }),\n    );\n  };\n\n  const allComplete = () => {\n    if (listTodo.find(todo => todo.completed !== true)) {\n      const newArr = listTodo.map(todo => (\n        {\n          ...todo,\n          completed: true,\n        }\n      ));\n\n      return setListTodo(newArr);\n    }\n\n    return setListTodo(\n      listTodo.map((todo) => {\n        const handle = todo.completed;\n\n        return {\n          ...todo,\n          completed: !handle,\n        };\n      }),\n    );\n  };\n\n  const clearCompleted = () => {\n    setListTodo(\n      listTodo.filter(\n        todo => todo.completed !== true,\n      ),\n    );\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleEvent}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={event => setNewTodo(event.target.value)}\n            required\n          />\n        </form>\n      </header>\n\n      {listTodo.length > 0 && (\n        <TodoList\n          items={listTodo}\n          deleteTodo={deleteTodo}\n          changeComplete={changeComplete}\n          allComplete={allComplete}\n          clearCompleted={clearCompleted}\n          changeEditing={changeEditing}\n          changeItem={changeItem}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}